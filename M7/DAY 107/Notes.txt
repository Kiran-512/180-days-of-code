Properties and Fiedls
------------------------------------------
- fields are initialised withtbhe default values!
- to set valiation make fields into the properties!

- setter and getter are complex inexpressions so properties are intorduced in .net!

Properties comes with the Validations but they are slower than Fields.

Convention :
- If field is x then property should be X
- private variables must start with small letter
- Public varibales must start with the Capital Letter

------------------------------------------
private int x;
public int X{

set{
	if(value<100)
	       x=value
	else
	Console.WriteLine("Invalid value is been assigned");

}
get{

	return x;
}
}

//readonly porperty

public string P1{
	get{
	return value;
	}
	}

//write only :
public string P1{
	set{
	if(values=100)
	P1 =  value;
           }
}

Fields and Properties : 
public int P3; //F

private int p4;// P
public int P4{
	set{
	P4=value;
	}}

------------------------------------------

Read-only property :
- have only get in Property


------------------------------------------
AUTOMATIC PROPERTIES :
- used when there are no validation:
- get and set generated by the compiler
- private variable is also generated by the compiler
eg.

public int P4{get;set;}

//here get and get generated by the compiler and also private variable also generated by the compiler!

//public string Name { set; }// we can not use only set or only get


=======================

Constructor :
- Each class gets a default constructor :
.ctor()

=> Object Initialiser : 

Student s1 = new Student(){ name="Kiran", rollNo=100, Div="A"};

Student s1 = new Student{ name="Kiran", rollNo=100, Div="A"};

Both of the above are valid methods of initialising properties and fields

---------------------------------------------

Destructor : 
- DO not ever write this

~Student()
{
  Console.WriteLine("Destructor called");	
}


---------------------------------------------
Garbage Collector :

GC.Collect();

- We can call GC but it will slow down the process and affects the performance!

---------------------------------------------
=>  Static variables :

- Sharabale data : class level data :
- can be called directly without an object


Why static? single copy
why property? validations

why static property? single copy with the validations:

Why constructors ? to initialize data members!

Why sattic constructor ? to initialze static members !

-----------------------------------------------
Static constructor 

- Static constructor is called when the class is loaded 

Class is loaded when 
First Object of the class is created OR
static members of the class is access for the first time!

STATIC CONSTRUCTOR 
- is implicitely private!
- is implicitely called
- can not be overloaded
- can't have parameters!
- doesn't not have any access specifiers!

static class
can have only static members
can not be instantiated
can not be inherited


purpose - to define a general purpose functions!

=======================

=> Inheritence :
- code reusability!

base/parent/super class

derived/child/sub class 
---------------------------------------- 
Single inheritence

class baseclass{}

class derivedclass : baseclass{}

---------------------------------------
Multiple inheritnce- Not allowed 

class baseclass1{}
class baseclass2{}

class derivedclass : baseclass1,baseclass2{}

---------------------------------------
Multilevel inheritence:

class baseclass{}

class derivedclass1 : baseclass{}

class derivedclass2 : derivedclass1{}

=====================
Access specifiers :

private  - same class
public - everywhere
protected - same calss, derived class
internal - same class, same assembly (same project)
protected internal - same class, derived class same assembly (same project)
private protected - same class, derived class which are in the same assembly!

Default access specifiers : 
Default access modifier for class ,struct, Interface, Enum, Delegate is Internal. 
Default access modifier for class and struct members is private. 
No access modifier can be applied to interface members and always interface members are public


=====================

=> Property accessor : 
- specified either to set or to get

=> decreasing order of the acess specifiers
less restriction  to tight restrictions 

public
protected internal
protected / internal
private protected
private

- only one of get/set can have property access specifier!
- So in the case of Properties we can only reduce the acess but can not increase it!
eg.

  public int P2
        {
            private set
            {
                p2 = value;
            }
            get
            {
                return p2;
            }
        }

=====================
=> ShortsCuts :

Debug :
add breakpoints and click on steps

ILDASM - IL Disassender

File => Open

Solution => Project name => bin=>  debug => assembly.exe

exe has entry point defined where as dll file doesn't have it!

Which project to run : 
=> Three options for selecting start-up project
solution => right click on it -> current selection 
 
